from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
from asgiref.sync import sync_to_async

from .models import (Quiz, QuizVariant, Question, UserResult, UserAnswer, AllowedUser, InviteToken, UserProfile)

user_states = {}

def extract_user_id(obj):
    if hasattr(obj, "effective_user") and obj.effective_user:
        return obj.effective_user.id
    elif hasattr(obj, "from_user") and obj.from_user:
        return obj.from_user.id
    return None

@sync_to_async
def get_user_profile(user_id):
    return UserProfile.objects.filter(user_id=user_id).first()

@sync_to_async
def set_user_profile_name(user_id, name):
    profile, _ = UserProfile.objects.get_or_create(user_id=user_id)
    profile.user_name = name
    profile.save()

@sync_to_async
def check_quiz_access(user_id, quiz_id):
    try:
        quiz = Quiz.objects.get(id=quiz_id)
        token = InviteToken.objects.filter(quiz=quiz).order_by('-id').first()
        if not token:
            return False, "üö´ –ë“±–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞“ì–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω —Ç–æ–∫–µ–Ω –∂–æ“õ."
        if token.used_count >= token.usage_limit:
            return False, "üö´ –¢–æ–∫–µ–Ω “õ–æ–ª–¥–∞–Ω—ã–ª—ã–ø “õ–æ–π“ì–∞–Ω. “ö–æ–ª –∂–µ—Ç–∫—ñ–∑—É –∂–∞–±—ã“õ."
        allowed = AllowedUser.objects.filter(user_profile__user_id=user_id, quiz=quiz).exists()
        if not allowed:
            return False, "üö´ –ë“±–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞“ì–∞ “õ–æ–ª –∂–µ—Ç–∫—ñ–∑—É —Ä“±“õ—Å–∞—Ç—ã“£—ã–∑ –∂–æ“õ."
        return True, ""
    except Quiz.DoesNotExist:
        return False, "üö´ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —Ç–∞–±—ã–ª–º–∞–¥—ã."

@sync_to_async
def check_quiz_access_by_title(user_id, quiz_title):
    try:
        quiz = Quiz.objects.get(title=quiz_title)
        token = InviteToken.objects.filter(quiz=quiz).order_by('-id').first()
        if not token:
            return None, "üö´ –ë“±–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞“ì–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω —Ç–æ–∫–µ–Ω –∂–æ“õ."
        if token.used_count >= token.usage_limit:
            return None, "üö´ –¢–æ–∫–µ–Ω “õ–æ–ª–¥–∞–Ω—ã–ª—ã–ø “õ–æ–π“ì–∞–Ω. “ö–æ–ª –∂–µ—Ç–∫—ñ–∑—É –∂–∞–±—ã“õ."
        return quiz, ""
    except Quiz.DoesNotExist:
        return None, "üö´ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —Ç–∞–±—ã–ª–º–∞–¥—ã."

@sync_to_async
def get_valid_invite_token_and_quiz(code, user_id):
    try:
        token = InviteToken.objects.select_related("quiz").get(token=code)
        if token.is_valid():
            quiz = token.quiz
            already_allowed = AllowedUser.objects.filter(user_profile__user_id=user_id, quiz=quiz).exists()
            if not already_allowed:
                token.used_count += 1
                token.save()
            return quiz
    except InviteToken.DoesNotExist:
        return None
    return None

@sync_to_async
def add_allowed_user_db(user_id, quiz, user_name, invite_token=None):
    if not isinstance(quiz, Quiz):
        raise ValueError(f"–ö“Ø—Ç—ñ–ª–≥–µ–Ω Quiz “Ø–ª–≥—ñ—Å—ñ, –±—ñ—Ä–∞“õ {type(quiz)} —Ç–∞–±—ã–ª–¥—ã")

    profile, _ = UserProfile.objects.get_or_create(user_id=user_id)

    if profile.user_name != user_name:
        profile.user_name = user_name
        profile.save()

    invite_token_obj = None
    if invite_token:
        try:
            invite_token_obj = InviteToken.objects.get(token=invite_token)
        except InviteToken.DoesNotExist:
            invite_token_obj = None  # –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ None

    AllowedUser.objects.update_or_create(
        user_profile=profile,
        quiz=quiz,
        defaults={
            'invite_token': invite_token_obj
        }
    )

@sync_to_async
def clean_expired_access(user_id):
    for allowed in AllowedUser.objects.filter(user_profile__user_id=user_id):
        tokens = InviteToken.objects.filter(quiz=allowed.quiz)
        if all(not t.is_valid() for t in tokens):
            allowed.delete()

@sync_to_async
def is_user_allowed(user_id):
    return AllowedUser.objects.filter(user_profile__user_id=user_id).exists()

@sync_to_async
def get_allowed_quizzes(user_id):
    return list(Quiz.objects.filter(alloweduser__user_profile__user_id=user_id))

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = extract_user_id(update)
    await clean_expired_access(user_id)

    allowed = await is_user_allowed(user_id)
    if allowed:
        user_states[user_id] = {"stage": "select_quiz"}
        await update.message.reply_text("–°”ô–ª–µ–º! –°–∞“ì–∞–Ω “õ–æ–ª–∂–µ—Ç—ñ–º–¥—ñ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞–ª–∞—Ä:")
        await show_quiz_options(update, context, only_allowed=True)
    else:
        keyboard = [["üîë –ú–µ–Ω–¥–µ —Ç–æ–∫–µ–Ω –±–∞—Ä"]]
        markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–°”ô–ª–µ–º! “ö–∞–∑—ñ—Ä–≥—ñ —Ç–∞“£–¥–∞ —Å–µ–Ω–¥–µ “õ–æ–ª –∂–µ—Ç–∫—ñ–∑—É –∂–æ“õ. –ï–≥–µ—Ä —Å–µ–Ω–¥–µ —Ç–æ–∫–µ–Ω –±–æ–ª—Å–∞, —Ç”©–º–µ–Ω–¥–µ–≥—ñ –±–∞—Ç—ã—Ä–º–∞–Ω—ã –±–∞—Å:",
            reply_markup=markup
        )

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = extract_user_id(update)
    state = user_states.get(user_id, {})
    text = update.message.text.strip()

    # üîë –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã "–ú–µ–Ω–¥–µ —Ç–æ–∫–µ–Ω –±–∞—Ä" –¥–µ–ø —Ç–∞“£–¥–∞–π–¥—ã
    if text == "üîë –ú–µ–Ω–¥–µ —Ç–æ–∫–µ–Ω –±–∞—Ä":
        user_states[user_id] = {"stage": "waiting_token"}
        await update.message.reply_text("üîê “ö–æ–ª –∂–µ—Ç–∫—ñ–∑—É —Ç–æ–∫–µ–Ω—ñ–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:")
        return

    # üü† –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã —Ç–æ–∫–µ–Ω –µ–Ω–≥—ñ–∑–µ–¥—ñ
    if state.get("stage") == "waiting_token":
        quiz = await get_valid_invite_token_and_quiz(text, user_id)
        if quiz:
            user_states[user_id] = {
                "stage": "ask_name",
                "quiz_id": quiz.id,
                "quiz_obj": quiz,
                "invite_token": text
            }
            await update.message.reply_text("‚úÖ “ö–æ–ª –∂–µ—Ç–∫—ñ–∑—É —Ä“±“õ—Å–∞—Ç –µ—Ç—ñ–ª–¥—ñ!", reply_markup=ReplyKeyboardRemove())
            await update.message.reply_text("–ï–Ω–¥—ñ ”©–∑ –∞—Ç—ã“£–¥—ã –∂–∞–∑—ã“£—ã–∑:")
        else:
            await update.message.reply_text("‚ùå –¢–æ–∫–µ–Ω “õ–∞—Ç–µ. “ö–∞–π—Ç–∞–¥–∞–Ω –∫”©—Ä—ñ“£—ñ–∑.")
        return

    # ‚úÖ –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã –∞—Ç—ã-–∂”©–Ω—ñ–Ω –µ–Ω–≥—ñ–∑–µ–¥—ñ
    if state.get("stage") == "ask_name":
        await handle_name(update, context)
        return

    # üîÑ –ë–µ–ª–≥—ñ–ª—ñ –±—ñ—Ä –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞“ì–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω —Ç–æ–∫–µ–Ω —Ç–µ–∫—Å–µ—Ä—É
    if state.get("stage") == "waiting_token_for_quiz":
        quiz_id = state.get("requested_quiz_id")
        try:
            token = await sync_to_async(
                InviteToken.objects.select_related("quiz").get
            )(token=text, quiz_id=quiz_id)

            if await sync_to_async(token.is_valid)():
                await sync_to_async(token.mark_used)()
                quiz = token.quiz
                profile = await get_user_profile(user_id)
                user_name = profile.user_name if profile else "–ê—Ç—ã –±–µ–ª–≥—ñ—Å—ñ–∑"

                if not isinstance(quiz, Quiz):
                    raise ValueError("quiz Quiz “Ø–ª–≥—ñ—Å—ñ–Ω–¥–µ –µ–º–µ—Å")

                await add_allowed_user_db(user_id, quiz, user_name, invite_token=text)

                user_states[user_id] = {
                    "stage": "ask_name",
                    "quiz_id": quiz.id,
                    "quiz_obj": quiz
                }

                await context.bot.send_message(chat_id=user_id, text="‚úÖ “ö–æ–ª –∂–µ—Ç–∫—ñ–∑—É —Ä“±“õ—Å–∞—Ç –µ—Ç—ñ–ª–¥—ñ!")
                await handle_quiz_selection_with_id(user_id, quiz.id, context)
                return
            else:
                await context.bot.send_message(chat_id=user_id, text="‚ùå –¢–æ–∫–µ–Ω –∂–∞—Ä–∞–º—Å—ã–∑.")
                return

        except InviteToken.DoesNotExist:
            await context.bot.send_message(chat_id=user_id, text="üö´ –¢–æ–∫–µ–Ω —Ç–∞–±—ã–ª–º–∞–¥—ã.")
            return

    await update.message.reply_text("–ë–∞—Å—Ç–∞—É “Ø—à—ñ–Ω /start –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω –ø–∞–π–¥–∞–ª–∞–Ω—ã“£—ã–∑.")

async def handle_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = extract_user_id(update)
    state = user_states.get(user_id)
    if not state or state.get("stage") != "ask_name":
        await update.message.reply_text("”®—Ç—ñ–Ω–µ–º—ñ–Ω, /start –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω–∞–Ω –±–∞—Å—Ç–∞“£—ã–∑.")
        return

    user_name = update.message.text.strip()
    quiz_id = state.get("quiz_id")
    token_used = state.get("invite_token")  # ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω

    if not quiz_id:
        user_states[user_id] = {"stage": "waiting_token"}
        await update.message.reply_text("üîë “ö–æ–ª –∂–µ—Ç–∫—ñ–∑—É —Ç–æ–∫–µ–Ω—ñ–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:")
        return

    quiz = await sync_to_async(Quiz.objects.get)(id=quiz_id)

    await set_user_profile_name(user_id, user_name)
    await add_allowed_user_db(user_id, quiz, user_name, invite_token=token_used)  # ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º —Ç–æ–∫–µ–Ω

    user_states[user_id] = {
        "stage": "select_quiz",
        "name": user_name
    }

    await update.message.reply_text(f"–¢–∞–Ω—ã—Å“õ–∞–Ω—ã–º–∞ “õ—É–∞–Ω—ã—à—Ç—ã–º—ã–Ω, {user_name} ‚ú®")
    await show_quiz_options(update, context, only_allowed=True)

async def show_quiz_options(update_or_query, context: ContextTypes.DEFAULT_TYPE, only_allowed=False):
    user_id = extract_user_id(update_or_query)
    quizzes = await get_allowed_quizzes(user_id) if only_allowed else await sync_to_async(list)(Quiz.objects.all())
    if not quizzes:
        await context.bot.send_message(chat_id=user_id, text="“ö–æ–ª –∂–µ—Ç—ñ–º–¥—ñ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞–ª–∞—Ä –∂–æ“õ.")
        return
    keyboard = [[InlineKeyboardButton(q.title, callback_data=f"quiz_{q.id}")] for q in quizzes]
    await context.bot.send_message(
        chat_id=user_id,
        text="üìù –í–∏–∫—Ç–æ—Ä–∏–Ω–∞–Ω—ã —Ç–∞“£–¥–∞“£—ã–∑:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def handle_quiz_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    quiz_id = int(query.data.split("_")[1])
    user_id = extract_user_id(query)
    allowed = await sync_to_async(
        lambda: AllowedUser.objects.filter(user_profile__user_id=user_id, quiz_id=quiz_id).exists()
    )()
    if not allowed:
        user_states[user_id] = {
            "stage": "waiting_token_for_quiz",
            "requested_quiz_id": quiz_id
        }
        await query.message.reply_text("üö´ –ë“±–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞“ì–∞ “õ–æ–ª –∂–µ—Ç–∫—ñ–∑—É —Ä“±“õ—Å–∞—Ç—ã“£—ã–∑ –∂–æ“õ.\n“ö–æ–ª –∂–µ—Ç–∫—ñ–∑—É —Ç–æ–∫–µ–Ω—ñ–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:")
        return
    await handle_quiz_selection_with_id(user_id, quiz_id, context)


async def handle_quiz_selection_with_id(user_id, quiz_id, context):
    access_granted, message = await check_quiz_access(user_id, quiz_id)
    if not access_granted:
        await context.bot.send_message(chat_id=user_id, text=message)
        return
    variants = await sync_to_async(list)(QuizVariant.objects.filter(quiz_id=quiz_id))
    if not variants:
        await context.bot.send_message(chat_id=user_id, text="–ë“±–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ “Ø—à—ñ–Ω –Ω“±—Å“õ–∞–ª–∞—Ä –∂–æ“õ.")
        return
    user_results = await sync_to_async(list)(
        UserResult.objects.filter(user_profile__user_id=user_id, quiz_id=quiz_id)
    )
    passed_ids = [r.variant_id for r in user_results if r.variant_id]
    keyboard = [
        [InlineKeyboardButton(f"‚úÖ {v.title}" if v.id in passed_ids else v.title, callback_data=f"variant_{v.id}")]
        for v in variants
    ]
    await context.bot.send_message(
        chat_id=user_id,
        text="üìÇ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω“±—Å“õ–∞—Å—ã–Ω —Ç–∞“£–¥–∞“£—ã–∑:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def handle_variant_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        variant_id = int(query.data.split("_")[1])
    except (IndexError, ValueError):
        await query.message.reply_text("‚ùå “ö–∞—Ç–µ: –í–∞—Ä–∏–∞–Ω—Ç —Ç–∞“£–¥–∞–ª–º–∞–¥—ã.")
        return

    user_id = extract_user_id(query)

    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç—É
    questions = await sync_to_async(list)(
        Question.objects.filter(variant_id=variant_id)
    )

    if not questions:
        await query.message.reply_text("‚ùå –ë“±–ª –≤–∞—Ä–∏–∞–Ω—Ç—Ç–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä —Ç–∞–±—ã–ª–º–∞–¥—ã.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º –≤–∞—Ä–∏–∞–Ω—Ç –∏ —Å–≤—è–∑–∞–Ω–Ω—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
    variant = await sync_to_async(
        QuizVariant.objects.select_related("quiz").get
    )(id=variant_id)

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
    user_profile = await get_user_profile(user_id)
    user_name = user_profile.user_name

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_states[user_id] = {
        "quiz_id": variant.quiz.id,
        "variant_id": variant.id,
        "questions": questions,
        "index": 0,
        "score": 0,
        "answers": [],
        "name": user_name,
        "stage": "in_quiz",
        "answered": False,
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–µ
    await query.message.reply_text(
        f"üìò –¢–∞“õ—ã—Ä—ã–ø: *{variant.quiz.title}*\n"
        f"üìë –¢–∞“£–¥–∞–ª“ì–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç: *{variant.title}*",
        parse_mode=ParseMode.MARKDOWN,
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await send_question(query, context)


async def send_question(update_or_query, context: ContextTypes.DEFAULT_TYPE):
    user_id = extract_user_id(update_or_query)
    state = user_states.get(user_id)

    if not state:
        await context.bot.send_message(chat_id=user_id, text="‚ö†Ô∏è “ö–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã. –ê–ª–¥—ã–º–µ–Ω –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞–Ω—ã –±–∞—Å—Ç–∞“£—ã–∑.")
        return
    index = state["index"]
    questions = state["questions"]
    if index >= len(questions):
        quiz = await sync_to_async(Quiz.objects.get)(id=state["quiz_id"])
        variant = await sync_to_async(QuizVariant.objects.get)(id=state["variant_id"])
        profile = await get_user_profile(user_id)
        result = await sync_to_async(UserResult.objects.create)(
            user_profile=profile,
            quiz=quiz,
            variant=variant,
            score=state["score"],
            total=len(questions)
        )
        for answer in state["answers"]:
            await sync_to_async(UserAnswer.objects.create)(
                result=result,
                question=answer["question"],
                selected_option=answer["selected"],
                is_correct=answer["is_correct"]
            )
        await context.bot.send_message(chat_id=user_id, text=f"üéâ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∞—è“õ—Ç–∞–ª–¥—ã! –°—ñ–∑–¥—ñ“£ –Ω”ô—Ç–∏–∂–µ“£—ñ–∑: {state['score']} / {len(questions)}.")
        await context.bot.send_message(
            chat_id=user_id,
            text="“ö–∞–Ω–¥–∞–π ”ô—Ä–µ–∫–µ—Ç –∂–∞—Å–∞–π–º—ã–∑?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÅ –ë–∞—Å“õ–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞–Ω—ã –±–∞—Å—Ç–∞—É", callback_data="again")],
                [InlineKeyboardButton("üìä –ù”ô—Ç–∏–∂–µ–ª–µ—Ä—ñ–º–¥—ñ –∫”©—Ä—É", callback_data="view_results")]
            ])
        )
        return
    q = questions[index]
    text = f"{q.question}\n\n1Ô∏è‚É£ {q.option1}\n\n2Ô∏è‚É£ {q.option2}\n\n3Ô∏è‚É£ {q.option3}\n\n4Ô∏è‚É£ {q.option4}"
    buttons = [[InlineKeyboardButton(f"{i + 1}Ô∏è‚É£", callback_data=str(i + 1))] for i in range(4)]

    await context.bot.send_message(chat_id=user_id, text=text, reply_markup=InlineKeyboardMarkup(buttons))
    state["answered"] = False


async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = extract_user_id(query)
    state = user_states.get(user_id)

    if not state or "questions" not in state or "index" not in state:
        await context.bot.send_message(chat_id=user_id, text="“ö–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã. /start –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω–∞–Ω “õ–∞–π—Ç–∞ –±–∞—Å—Ç–∞“£—ã–∑.")
        return
    if state.get("answered"):
        return
    state["answered"] = True
    await query.edit_message_reply_markup(reply_markup=None)
    index = state["index"]
    questions = state["questions"]
    selected = int(query.data)
    correct = int(questions[index].correct_answer)
    feedback = (
        "‚úÖ –î“±—Ä—ã—Å!" if selected == correct else
        f"‚ùå “ö–∞—Ç–µ. –î“±—Ä—ã—Å –∂–∞—É–∞–ø: {[questions[index].option1, questions[index].option2, questions[index].option3, questions[index].option4][correct - 1]}"
    )
    if selected == correct:
        state["score"] += 1
    state["answers"].append({
        "question": questions[index],
        "selected": selected,
        "is_correct": selected == correct
    })
    state["index"] += 1
    await context.bot.send_message(chat_id=user_id, text=feedback)
    await send_question(query, context)


@sync_to_async
def get_results_with_variants(user_id):
    results = UserResult.objects.filter(user_profile__user_id=user_id).select_related("quiz", "variant").order_by('-id')
    output = []
    for i, r in enumerate(results, 1):
        date = r.timestamp.strftime('%d.%m.%Y %H:%M') if r.timestamp else "‚Äî"
        variant_title = r.variant.title if r.variant else "‚Äî"
        output.append(
            f"{i}) {r.quiz.title}\n"
            f"üìÑ {variant_title}\n"
            f"‚úÖ –ë–∞–ª–ª: {r.score}/{r.total}\n"
            f"üìÖ {date}\n\n"
        )
    return output


async def show_results(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = extract_user_id(update)
    lines = await get_results_with_variants(user_id)
    text = "üìä *–°—ñ–∑–¥—ñ“£ –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä—ñ“£—ñ–∑:*\n\n" + "".join(lines) if lines else "üì≠ ”ò–∑—ñ—Ä–≥–µ –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä –∂–æ“õ."
    parts = [text[i:i+4096] for i in range(0, len(text), 4096)]
    if update.callback_query:
        await update.callback_query.answer()  # ‚úÖ Telegram —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–≤–µ—Ç
        for part in parts:
            await update.callback_query.message.reply_text(part, parse_mode=ParseMode.MARKDOWN)
    elif update.message:
        for part in parts:
            await update.message.reply_text(part, parse_mode=ParseMode.MARKDOWN)


async def handle_quiz_repeat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await show_quiz_options(update, context, only_allowed=False)



